# ────────────────────────────────
#  Packages + Data
# ────────────────────────────────
library(refund)
library(tidyverse)
library(tidyfun)
library(lubridate)

data("COVID19", package = "refund")

# Helper: numeric x-coordinates
num_grid <- function(dates, ref = min(dates)) as.numeric(dates - ref)

# Weekly deaths tibble
nat_weekly <- tibble(
  date   = COVID19$US_weekly_mort_dates,
  deaths = COVID19$US_weekly_mort / 1000
)

# Convert to tf object
nat_tf <- tfd(
  matrix(nat_weekly$deaths, nrow = 1),
  arg = num_grid(nat_weekly$date)
)

# ────────────────────────────────
#  Define shaded rectangles using real year boundaries
# ────────────────────────────────

# Use known week boundaries:
date_2019_start <- as.Date("2019-01-05")
date_2019_end   <- as.Date("2019-12-28")
date_2020_start <- as.Date("2020-01-04")
date_2020_end   <- as.Date("2020-12-26")

shade <- tibble(
  band      = c("2019", "2020"),
  xmin_date = c(date_2019_start, date_2020_start),
  xmax_date = c(date_2019_end,   date_2020_end),
  colour    = c("blue", "red")
) %>%
  mutate(
    xmin = num_grid(xmin_date, ref = min(nat_weekly$date)),
    xmax = num_grid(xmax_date, ref = min(nat_weekly$date)) + 6,  # extend 1 week visually
    .keep = "unused"
  )

# Axis breaks: first week of each year in data
year_data <- nat_weekly %>%
  mutate(year = year(date)) %>%
  group_by(year) %>%
  slice_min(date) %>%
  mutate(day_num = num_grid(date)) %>%
  ungroup()

# ────────────────────────────────
#  Plot
# ────────────────────────────────

ggplot() +
  geom_rect(
    data = shade,
    aes(xmin = xmin, xmax = xmax, ymin = -Inf, ymax = Inf, fill = colour),
    inherit.aes = FALSE, alpha = 0.15
  ) +
  scale_fill_identity() +
  geom_meatballs(
    data = tibble(y = nat_tf),
    aes(y = y),
    colour = "steelblue", size = 2
  ) +
  scale_x_continuous(
    breaks = year_data$day_num,
    labels = as.character(year_data$year),
    expand = c(0, 0)
  ) +
  labs(
    x = "Weeks starting in January 2017",
    y = "Weekly all-cause deaths in the US (thousands)"
  ) +
  + theme_classic() +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1)
  )
